buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-dev'
        }
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.22.0'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.8'
        classpath 'org.jetbrains.intellij.plugins:inspection-plugin:0.3.2'
    }
}

allprojects {
    group 'wilmol'
    version = '1.0.0'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 11.0
    targetCompatibility = 11.0

    // Spotless (code formatting)
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        java {
            removeUnusedImports()
            googleJavaFormat()
        }
    }

    // Static analysis
    // Checkstyle (static analysis - code quality/style)
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '8.21'
        configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
        maxErrors = 0
        maxWarnings = 0
        ignoreFailures = false
    }
    // SpotBugs (static analysis - find possible bugs, performance issues etc.)
    apply plugin: 'com.github.spotbugs'
    spotbugs {
        toolVersion = '3.1.12'
        effort = 'max'
        reportLevel = 'low'
        ignoreFailures = false
    }
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            html.enabled = true
            xml.enabled = false
        }
    }
    // IDEA inspections (more static analysis - similar to checkstyle)
    // TODO why does it spit out a bunch of warnings (Illegal reflective access... ???) and slow (but works??)
//    apply plugin: 'org.jetbrains.intellij.inspections'
//    inspections {
//        toolVersion 'ideaIC:2019.1.4'
//        errors.max = 0
//        warnings.max = 0
//        warning('FieldMayBeFinal')
////        warning('ConstantOnWrongSideOfComparison')
//        warning('EqualsCalledOnEnumConstant')
//        warning('ClassWithMultipleLoggers')
//        warning('LoggerInitializedWithForeignClass')
//        warning('LoggingConditionDisagreesWithLogStatement')
//        warning('MapReplaceableByEnumMap')
//        warning('SetReplaceableByEnumSet')
//        warning('SizeReplaceableByIsEmpty')
//        warning('StringEqualsEmptyString')
//        warning('ObsoleteCollection')
//        warning('OptionalContainsCollection')
//    }

    // Tests
    test {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        useJUnitPlatform()
        testLogging {
            exceptionFormat 'full'
            events 'failed'
        }
    }
    // JaCoCo (code coverage reporting)
    apply plugin: 'jacoco'
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }
    }
    check.dependsOn jacocoTestReport

    dependencies {
        testImplementation group: 'com.google.truth', name: 'truth', version: '1.0'
        testImplementation group: 'com.google.truth.extensions', name: 'truth-java8-extension', version: '1.0'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.5.0-RC1'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.0-RC1'
    }
}
